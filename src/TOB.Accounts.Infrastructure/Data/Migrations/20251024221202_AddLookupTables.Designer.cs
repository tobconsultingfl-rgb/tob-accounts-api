// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TOB.Accounts.Infrastructure.Data;

#nullable disable

namespace TOB.Accounts.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AccountsDbContext))]
    [Migration("20251024221202_AddLookupTables")]
    partial class AddLookupTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TOB.Accounts.Infrastructure.Data.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("AccountStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AnnualRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BillingAddressLine1")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BillingAddressLine2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BillingCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BillingCountry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BillingPostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BillingState")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("IndustryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Rating")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressLine1")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ShippingAddressLine2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ShippingCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingCountry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingPostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShippingState")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountNumber")
                        .HasDatabaseName("IX_Accounts_AccountNumber");

                    b.HasIndex("AccountStatusId")
                        .HasDatabaseName("IX_Accounts_AccountStatusId");

                    b.HasIndex("AccountTypeId")
                        .HasDatabaseName("IX_Accounts_AccountTypeId");

                    b.HasIndex("IndustryId")
                        .HasDatabaseName("IX_Accounts_IndustryId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Accounts_IsActive");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_Accounts_OwnerId");

                    b.HasIndex("ParentAccountId")
                        .HasDatabaseName("IX_Accounts_ParentAccountId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Accounts_TenantId");

                    b.HasIndex("TenantId", "Name")
                        .HasDatabaseName("IX_Accounts_TenantId_Name");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("TOB.Accounts.Infrastructure.Data.AccountDocument", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlobContainer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BlobName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BlobUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Category")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DocumentId");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("IX_AccountDocuments_AccountId");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_AccountDocuments_Category");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_AccountDocuments_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_AccountDocuments_IsActive");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_AccountDocuments_TenantId");

                    b.HasIndex("TenantId", "AccountId")
                        .HasDatabaseName("IX_AccountDocuments_TenantId_AccountId");

                    b.ToTable("AccountDocuments");
                });

            modelBuilder.Entity("TOB.Accounts.Infrastructure.Data.AccountStatus", b =>
                {
                    b.Property<Guid>("AccountStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AccountStatusId");

                    b.HasIndex("DisplayOrder")
                        .HasDatabaseName("IX_AccountStatuses_DisplayOrder");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_AccountStatuses_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_AccountStatuses_Name");

                    b.ToTable("AccountStatuses");

                    b.HasData(
                        new
                        {
                            AccountStatusId = new Guid("00000000-0000-0000-0001-000000000001"),
                            Description = "Active account with ongoing business",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Active"
                        },
                        new
                        {
                            AccountStatusId = new Guid("00000000-0000-0000-0001-000000000002"),
                            Description = "Inactive account with no current business",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Inactive"
                        },
                        new
                        {
                            AccountStatusId = new Guid("00000000-0000-0000-0001-000000000003"),
                            Description = "Account temporarily on hold",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "On Hold"
                        },
                        new
                        {
                            AccountStatusId = new Guid("00000000-0000-0000-0001-000000000004"),
                            Description = "Closed account",
                            DisplayOrder = 4,
                            IsActive = true,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("TOB.Accounts.Infrastructure.Data.AccountType", b =>
                {
                    b.Property<Guid>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AccountTypeId");

                    b.HasIndex("DisplayOrder")
                        .HasDatabaseName("IX_AccountTypes_DisplayOrder");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_AccountTypes_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_AccountTypes_Name");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            AccountTypeId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Existing customer with active business",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Customer"
                        },
                        new
                        {
                            AccountTypeId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "Potential customer",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Prospect"
                        },
                        new
                        {
                            AccountTypeId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Description = "Business partner",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "Partner"
                        },
                        new
                        {
                            AccountTypeId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "Supplier or vendor",
                            DisplayOrder = 4,
                            IsActive = true,
                            Name = "Vendor"
                        },
                        new
                        {
                            AccountTypeId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Description = "Business competitor",
                            DisplayOrder = 5,
                            IsActive = true,
                            Name = "Competitor"
                        });
                });

            modelBuilder.Entity("TOB.Accounts.Infrastructure.Data.Contact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DoNotCall")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("DoNotEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("HasOptedOutOfEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("HomePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPrimaryContact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MailingAddressLine1")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MailingAddressLine2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MailingCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MailingCountry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MailingPostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MailingState")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("OtherAddressLine1")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OtherAddressLine2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OtherCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OtherCountry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OtherPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtherPostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OtherState")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ReportsToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Salutation")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SecondaryEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Twitter")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ContactId");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("IX_Contacts_AccountId");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Contacts_Email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Contacts_IsActive");

                    b.HasIndex("IsPrimaryContact")
                        .HasDatabaseName("IX_Contacts_IsPrimaryContact");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_Contacts_OwnerId");

                    b.HasIndex("ReportsToId")
                        .HasDatabaseName("IX_Contacts_ReportsToId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Contacts_TenantId");

                    b.HasIndex("FirstName", "LastName")
                        .HasDatabaseName("IX_Contacts_FirstName_LastName");

                    b.HasIndex("TenantId", "AccountId")
                        .HasDatabaseName("IX_Contacts_TenantId_AccountId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("TOB.Accounts.Infrastructure.Data.Industry", b =>
                {
                    b.Property<Guid>("IndustryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IndustryId");

                    b.HasIndex("DisplayOrder")
                        .HasDatabaseName("IX_Industries_DisplayOrder");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Industries_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Industries_Name");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000001"),
                            Description = "Accounting and bookkeeping services",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Accounting"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000002"),
                            Description = "Advertising agencies and marketing services",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Advertising & Marketing"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000003"),
                            Description = "Aerospace and defense industries",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "Aerospace & Defense"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000004"),
                            Description = "Agriculture, farming, and agribusiness",
                            DisplayOrder = 4,
                            IsActive = true,
                            Name = "Agriculture"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000005"),
                            Description = "Architecture and engineering services",
                            DisplayOrder = 5,
                            IsActive = true,
                            Name = "Architecture & Engineering"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000006"),
                            Description = "Automotive manufacturing and services",
                            DisplayOrder = 6,
                            IsActive = true,
                            Name = "Automotive"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000007"),
                            Description = "Banking and financial institutions",
                            DisplayOrder = 7,
                            IsActive = true,
                            Name = "Banking"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000008"),
                            Description = "Biotechnology and life sciences",
                            DisplayOrder = 8,
                            IsActive = true,
                            Name = "Biotechnology"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000009"),
                            Description = "Chemical manufacturing and distribution",
                            DisplayOrder = 9,
                            IsActive = true,
                            Name = "Chemicals"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000010"),
                            Description = "Construction and building services",
                            DisplayOrder = 10,
                            IsActive = true,
                            Name = "Construction"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000011"),
                            Description = "Management and professional consulting",
                            DisplayOrder = 11,
                            IsActive = true,
                            Name = "Consulting"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000012"),
                            Description = "Consumer products and packaged goods",
                            DisplayOrder = 12,
                            IsActive = true,
                            Name = "Consumer Goods"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000013"),
                            Description = "Online retail and e-commerce platforms",
                            DisplayOrder = 13,
                            IsActive = true,
                            Name = "E-commerce"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000014"),
                            Description = "Educational institutions and services",
                            DisplayOrder = 14,
                            IsActive = true,
                            Name = "Education"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000015"),
                            Description = "Energy production and utility services",
                            DisplayOrder = 15,
                            IsActive = true,
                            Name = "Energy & Utilities"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000016"),
                            Description = "Entertainment and event services",
                            DisplayOrder = 16,
                            IsActive = true,
                            Name = "Entertainment"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000017"),
                            Description = "Environmental and sustainability services",
                            DisplayOrder = 17,
                            IsActive = true,
                            Name = "Environmental Services"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000018"),
                            Description = "Financial planning and investment services",
                            DisplayOrder = 18,
                            IsActive = true,
                            Name = "Financial Services"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000019"),
                            Description = "Food and beverage production and services",
                            DisplayOrder = 19,
                            IsActive = true,
                            Name = "Food & Beverage"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000020"),
                            Description = "Government agencies and public sector",
                            DisplayOrder = 20,
                            IsActive = true,
                            Name = "Government"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000021"),
                            Description = "Healthcare providers and medical services",
                            DisplayOrder = 21,
                            IsActive = true,
                            Name = "Healthcare"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000022"),
                            Description = "Hotels, resorts, and hospitality services",
                            DisplayOrder = 22,
                            IsActive = true,
                            Name = "Hospitality"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000023"),
                            Description = "HR services and staffing agencies",
                            DisplayOrder = 23,
                            IsActive = true,
                            Name = "Human Resources"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000024"),
                            Description = "IT services and technology consulting",
                            DisplayOrder = 24,
                            IsActive = true,
                            Name = "Information Technology"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000025"),
                            Description = "Insurance providers and brokers",
                            DisplayOrder = 25,
                            IsActive = true,
                            Name = "Insurance"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000026"),
                            Description = "Law firms and legal services",
                            DisplayOrder = 26,
                            IsActive = true,
                            Name = "Legal Services"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000027"),
                            Description = "Logistics and supply chain management",
                            DisplayOrder = 27,
                            IsActive = true,
                            Name = "Logistics & Supply Chain"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000028"),
                            Description = "Industrial and product manufacturing",
                            DisplayOrder = 28,
                            IsActive = true,
                            Name = "Manufacturing"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000029"),
                            Description = "Media, publishing, and broadcasting",
                            DisplayOrder = 29,
                            IsActive = true,
                            Name = "Media & Publishing"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000030"),
                            Description = "Mining, metals, and mineral extraction",
                            DisplayOrder = 30,
                            IsActive = true,
                            Name = "Mining & Metals"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000031"),
                            Description = "Non-profit organizations and charities",
                            DisplayOrder = 31,
                            IsActive = true,
                            Name = "Non-Profit"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000032"),
                            Description = "Oil and gas exploration and production",
                            DisplayOrder = 32,
                            IsActive = true,
                            Name = "Oil & Gas"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000033"),
                            Description = "Pharmaceutical development and distribution",
                            DisplayOrder = 33,
                            IsActive = true,
                            Name = "Pharmaceuticals"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000034"),
                            Description = "Real estate and property management",
                            DisplayOrder = 34,
                            IsActive = true,
                            Name = "Real Estate"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000035"),
                            Description = "Restaurants and food service",
                            DisplayOrder = 35,
                            IsActive = true,
                            Name = "Restaurants"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000036"),
                            Description = "Retail stores and shops",
                            DisplayOrder = 36,
                            IsActive = true,
                            Name = "Retail"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000037"),
                            Description = "Security services and products",
                            DisplayOrder = 37,
                            IsActive = true,
                            Name = "Security"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000038"),
                            Description = "Software development and SaaS",
                            DisplayOrder = 38,
                            IsActive = true,
                            Name = "Software"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000039"),
                            Description = "Sports, fitness, and recreational services",
                            DisplayOrder = 39,
                            IsActive = true,
                            Name = "Sports & Recreation"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000040"),
                            Description = "Telecommunications and internet services",
                            DisplayOrder = 40,
                            IsActive = true,
                            Name = "Telecommunications"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000041"),
                            Description = "Textiles, apparel, and fashion",
                            DisplayOrder = 41,
                            IsActive = true,
                            Name = "Textiles & Apparel"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000042"),
                            Description = "Transportation and shipping services",
                            DisplayOrder = 42,
                            IsActive = true,
                            Name = "Transportation"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000043"),
                            Description = "Travel agencies and tourism services",
                            DisplayOrder = 43,
                            IsActive = true,
                            Name = "Travel & Tourism"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000044"),
                            Description = "Wholesale and distribution services",
                            DisplayOrder = 44,
                            IsActive = true,
                            Name = "Wholesale & Distribution"
                        },
                        new
                        {
                            IndustryId = new Guid("00000000-0000-0000-0002-000000000099"),
                            Description = "Other industries not listed",
                            DisplayOrder = 99,
                            IsActive = true,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("TOB.Accounts.Infrastructure.Data.Account", b =>
                {
                    b.HasOne("TOB.Accounts.Infrastructure.Data.AccountStatus", "AccountStatus")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TOB.Accounts.Infrastructure.Data.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TOB.Accounts.Infrastructure.Data.Industry", "Industry")
                        .WithMany("Accounts")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccountStatus");

                    b.Navigation("AccountType");

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("TOB.Accounts.Infrastructure.Data.AccountDocument", b =>
                {
                    b.HasOne("TOB.Accounts.Infrastructure.Data.Account", "Account")
                        .WithMany("Documents")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TOB.Accounts.Infrastructure.Data.Contact", b =>
                {
                    b.HasOne("TOB.Accounts.Infrastructure.Data.Account", "Account")
                        .WithMany("Contacts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TOB.Accounts.Infrastructure.Data.Account", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("TOB.Accounts.Infrastructure.Data.AccountStatus", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("TOB.Accounts.Infrastructure.Data.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("TOB.Accounts.Infrastructure.Data.Industry", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
