trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - deploy/main.bicep

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: environment
    displayName: 'Environment'
    type: string
    default: 'dev'
    values:
      - dev
      - test
      - prod

variables:
  - name: azureSubscription
    value: 'YOUR_AZURE_SERVICE_CONNECTION_NAME'
  - name: buildConfiguration
    value: 'Release'
  - name: dotnetSdkVersion
    value: '9.x'
  - name: projectPath
    value: 'src/TOB.Accounts.API/TOB.Accounts.API.csproj'

stages:
  - stage: Build
    displayName: 'Build Application'
    jobs:
      - job: BuildJob
        displayName: 'Build .NET Application'
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET SDK $(dotnetSdkVersion)'
            inputs:
              version: $(dotnetSdkVersion)
              includePreviewVersions: false

          - task: DotNetCoreCLI@2
            displayName: 'Restore NuGet Packages'
            inputs:
              command: 'restore'
              projects: '**/*.csproj'
              feedsToUse: 'select'

          - task: DotNetCoreCLI@2
            displayName: 'Build Solution'
            inputs:
              command: 'build'
              projects: '**/*.csproj'
              arguments: '--configuration $(buildConfiguration) --no-restore'

          - task: DotNetCoreCLI@2
            displayName: 'Run Tests'
            inputs:
              command: 'test'
              projects: '**/*Tests.csproj'
              arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"'
              publishTestResults: true

          - task: DotNetCoreCLI@2
            displayName: 'Publish Application'
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: '$(projectPath)'
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/app --no-build'
              zipAfterPublish: true
              modifyOutputPath: false

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: DeployDev
    displayName: 'Deploy to Dev'
    dependsOn: Build
    condition: and(succeeded(), eq('${{ parameters.environment }}', 'dev'))
    jobs:
      - deployment: DeployAppService
        displayName: 'Deploy to App Service'
        environment: 'dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@1
                  displayName: 'Download Artifacts'
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'drop'
                    downloadPath: '$(System.ArtifactsDirectory)'

                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure App Service'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    appType: 'webApp'
                    appName: '$(appServiceName)'
                    package: '$(System.ArtifactsDirectory)/drop/app/*.zip'
                    deploymentMethod: 'auto'

                - task: AzureCLI@2
                  displayName: 'Run Database Migrations'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "Database migrations would run here"
                      # Add EF Core migrations command here if needed
                      # dotnet ef database update --connection "$(connectionString)"

  - stage: DeployTest
    displayName: 'Deploy to Test'
    dependsOn: Build
    condition: and(succeeded(), eq('${{ parameters.environment }}', 'test'))
    jobs:
      - deployment: DeployAppService
        displayName: 'Deploy to App Service'
        environment: 'test'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@1
                  displayName: 'Download Artifacts'
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'drop'
                    downloadPath: '$(System.ArtifactsDirectory)'

                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure App Service'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    appType: 'webApp'
                    appName: '$(appServiceName)'
                    package: '$(System.ArtifactsDirectory)/drop/app/*.zip'
                    deploymentMethod: 'auto'

                - task: AzureCLI@2
                  displayName: 'Run Database Migrations'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "Database migrations would run here"
                      # Add EF Core migrations command here if needed
                      # dotnet ef database update --connection "$(connectionString)"

  - stage: DeployProd
    displayName: 'Deploy to Production'
    dependsOn: Build
    condition: and(succeeded(), eq('${{ parameters.environment }}', 'prod'))
    jobs:
      - deployment: DeployAppService
        displayName: 'Deploy to App Service'
        environment: 'prod'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@1
                  displayName: 'Download Artifacts'
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'drop'
                    downloadPath: '$(System.ArtifactsDirectory)'

                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure App Service'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    appType: 'webApp'
                    appName: '$(appServiceName)'
                    package: '$(System.ArtifactsDirectory)/drop/app/*.zip'
                    deploymentMethod: 'auto'
                    slotName: 'staging'

                - task: AzureAppServiceManage@0
                  displayName: 'Swap Staging to Production'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    action: 'Swap Slots'
                    webAppName: '$(appServiceName)'
                    resourceGroupName: '$(resourceGroupName)'
                    sourceSlot: 'staging'
                    targetSlot: 'production'

                - task: AzureCLI@2
                  displayName: 'Run Database Migrations'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "Database migrations would run here"
                      # Add EF Core migrations command here if needed
                      # dotnet ef database update --connection "$(connectionString)"
